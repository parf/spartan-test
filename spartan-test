#!/usr/bin/php
<?php
/*

Spartan
 PHP Unit Test Framework

2011-??-?? - V1.0 - 15min simple but solid test script
2011-08-24 - V1.3 - sets of minor changes, used in production
2012-06-20 - v2.0 - githubbed, licensed as MIT. minor improvements

Author: Sergey Porfiriev <parf@comfi.com>
License: MIT (http://www.opensource.org/licenses/mit-license.php)

TODO:
: do not rewrite original files if not needed!!!
: add multiline support
: make web-friendly version
: implement as a class   -- Why bother??

*/

const VERSION = 2.1;

if (php_sapi_name() != 'cli')
    die("cli required");

ini_set('display_errors', 1);

$me = array_shift($argv); // get rid of $__0
if (! $argv)
    return usage($me);

// Arguments
$ARG=array(); // ARGS
foreach($argv as $a)
    if ($a[0]=='-')
        $ARG[$a]=1;

if (@$ARG["--help"])
  return readfile(__DIR__.'/README.md');

if (@$ARG["--example"])
  return readfile(__DIR__.'/examples/sample.test');

if (@$ARG["--legal"])
  return legal();

// files from stdin support
if (@$ARG['--'] || @$ARG['--stdin'])
    $argv=file("php://stdin", FILE_IGNORE_NEW_LINES);

if (@$ARG["--clean"])
    $ARG["-g"] = 1;

$__REGENERATE = @$ARG["-g"];
$__STDOUT     = @$ARG["-o"];
$__SILENT     = @$ARG["-s"] ||  @$ARG["-silent"];
if ($__STDOUT)
    $__SILENT = 1;
if ($__SILENT)
    $ARG["--nocolor"] = 1;

if (@$ARG["-c"]) { // color test output
    unset($ARG["--nocolor"]);
    $ARG["--color"] = 1;
    $__SILENT = 1;
}

$TERM = getenv("TERM");
# console colors, only for xterm capable terminals
if (strpos($TERM,'xterm')!==false || $TERM=='linux')
    $ARG["--color"]=1;
if (@$ARG["--nocolor"])
    unset($ARG["--color"]);
$__NORM=$__BOLD=$__RED=$__BLUE=$__GREEN="";
if (@$ARG["--color"]) {
    $__NORM ="\033[0m";
    $__BOLD ="\033[1m";
    $__RED  ="\033[31m"; // error
    $__BLUE ="\033[34m"; // code
    $__GREEN="\033[32m"; // result
}


$__fn = 0; // file_number
while($__file = array_shift($argv)) {
    $__start = microtime(true);
    if ($__file[0] == '-')
        continue;

    $__fn++;
    if ($__fn==1 && ! isset($ARG["--no-init"])) { // first file
        // search for "init.php" file and include it
        $path=realpath($__file);
        while ($path=dirname($path)) {
            if ($path=="/")
                break;
            if ( file_exists($path."/init.php") ) {
                // allow notices in init.php
                if (! isset($ARG["--no-error-handler"]))
                     set_error_handler('Error::handler', E_ALL ^ E_NOTICE); 

                include $path."/init.php";

                if ($__z=Error::get()) { //
                    $__err=$__RED."PHP Error".$__NORM.": ".json_encode($__z)."\n";
                    fwrite(STDERR, $__err);
                    exit(1);
                }
                break;
            }
        }
    }

    if ($__fn==1 && ! isset($ARG["--no-error-handler"])) {
        set_error_handler('Error::handler', E_ALL);
        Error::$suppress=0;
    }

    $__handle = @fopen($__file, "r");
    if (! $__handle ) {
        fwrite(STDERR, "Can't read file '$__file'\n");
        continue;
    }

    $__out=array(); // output
    $__r=false;
    $__z=false;
    $__c=0;     // 0 - code line,  1- result line
    $__l=0;     // # of lines processed
    $__tests=0; // # of tests
    $__failed=0;
    $__errs="";
    $__code="";
    $__ml_comment=0; // multiline comment flag

    while (!feof($__handle)) {
        $__l0=fgets($__handle);
        $__out[]=$__l0;
        $__line=trim($__l0);
        $__l++;
        $__l2=substr($__line, 0, 2);

        // multi-line comments
        if ($__l2=='/*') {
            $__ml_comment=1;
            continue;
        }
        if ($__ml_comment) {
            if (substr($__line,-2)=='*/')
                $__ml_comment=0;
            continue;
        }

        if ($__c && $__l2=='#=') {    // HAVE TO CHECK RESULTS
            if ($__REGENERATE) {
                array_pop($__out); // GET RID OF OLD RESULT.
                continue;
            }
            $__old=array_pop($__out);
            $__gen=array_pop($__out);
            $__out[]=$__old; // preserve old result

            $__r=substr($__line, 2);
            if ($__r==$__z)
                continue;

            $__errs.="Line $__l: $__BLUE$__code$__NORM\n  expect: $__r\n  got   : $__RED$__z$__NORM\n";
            $__failed++;
            continue;
        }

        if ($__l2=='#=') {
            $__errs="Line $__l: unexpected result comment: $__line removed\n";
            array_pop($__out);
            $__failed++;
            continue;
        }

        if (! $__line || $__l2=='//' || $__l2=='<?' || $__l2=='?>' || $__line[0]=='#')
            continue;
        // <? - vi coloring fix

        // ";command" - execute and discard result
        if ($__l2[0]==';') {
            $__z = "";
            $__et = ""; // exception trace
            ob_start();
            try {
                eval(ltrim($__line, " ;"));
            } catch(Exception $__ex) {
                $__z = array(get_class($__ex), $__ex->getMessage(), $__ex->getCode());
                $__et = $__ex->getTraceAsString();
                $__et = explode("\n", $__et);
                array_pop($__et); // get rid of useless trace elements
                array_pop($__et);
                $__et = "      ".join("\n      ", $__et);
            }
            if ($__e=Error::get())
                $__z[] = array("Error", $__e);
            if ($__ob=ob_get_clean())
                $__z[] = array("Unexpected Output:", $__ob);

            if (! $__z)
                continue;
            // ERRORS !!!
            $__err = str_replace('],[', "],\n    [", substr(json_encode($__z), 1, -1));
            $__err = str_replace('\n', "\n      ", $__err);
            $__err = $__BOLD.$__RED.$__err.$__NORM;
            $__err ="Line $__l: PHP Error: '$__line\n    ".$__err;
            if ($__et) $__err.="\n".$__et;
            if ($__fn>1)
                fwrite(STDERR, "file : $__file \n");
            fwrite(STDERR, "----------- ${__RED}UNEXPECTED ERROR${__NORM} ---------\n    ".$__err."\n");
            exit(1);
        }

        $__tests++;

        $__c=1;
        $__code=$__line;
        $__z="error";  // evaluation result
        ob_start();
        try {
            if (substr($__line, 0, 5)=='echo ' || substr($__line, 0, 6)=='unset(' || substr($__line, 0, 6)=='class ') {
                $__z=null;
                eval($__line);
            } else {
                eval("\$__z=$__line");
                if (is_array($__z))
                    ksort($__z);  // you should never relay on hash field order anyway
            }
        } catch(Exception $__ex) {
            $__z=array(get_class($__ex), $__ex->getMessage(), $__ex->getCode());
        }
        if (is_object($__z))
            $__z=array("class" => get_class($__z), $__z);

        if ($__err=Error::get())
            $__z=array($__err, $__z); // [error(s), result]

        $__ob=ob_get_clean();
        if ($__ob) {
            if ($__z==="error") {
                $__errs.="Line $__l: PHP Error: '$__line'\n  $__ob";
                $__failed++;
            } else
                $__z=array("r" => $__z, "out" => $__ob); // ["result" => .., "output" => ..]
        }

        $__z=json_encode($__z);
        $__out[]="#=".$__z."\n";
    }

    if (! $__REGENERATE) { // normal case
        $__t="*** Testing $__file - ";
        if ($__failed) {
            $__err=$__t."FAILED $__failed of $__tests tests\n";
            $__err=$__BOLD.$__RED.$__err.$__NORM;

            fwrite(STDERR, $__err);
        } else {
            if (! $__SILENT)
                echo $__t."OK $__tests tests in ".number_format(microtime(true)-$__start,2)."sec\n";
        }
        if ($__errs) {
            $__errs=str_replace("\n", "\n  ", $__errs); // identation
            fwrite(STDERR, "----------- Errors ---------\n  ".$__errs."\n");
        }
    } else {         // REGENERATE
        if (! $__SILENT)
            echo "*** $__file regenerated\n";
    }

    if ($__STDOUT && ! $__errs) { // no output when errors
        echo join("", $__out);
        continue;
    }

    // do ./test --clean, then ./test -c | tail
    if (@$ARG["-c"] && ! $__errs) { // color test output to stdout
        $__ml_comment = 0;
        $crap = array_flip( explode(" ", "# / < ?") );
        foreach ($__out as $o) {
            $o = trim($o, "; \n");
            if (substr($o, 0, 2) == '/*')
                $__ml_comment=1;
            if ($__ml_comment) {
                if (substr($o, -2)=='*/')
                    $__ml_comment=0;
                $o = "// ".$o;
            }
            if (!$o)
                continue;
            if (! isset($crap[$o[0]])) {
                echo $__BOLD.$__BLUE.$o.$__NORM."\n";
                continue;
            }
            if (substr($o, 0, 2)=='#=')
                $o = $__GREEN.substr($o, 2).$__NORM;
            else
                $o = "    ".$o;
            echo "    ".$o."\n";
        }
        continue;
    }

    if (@$ARG["--clean"]) {
        echo "*** $__file cleaned\n";
        $r=array();
        foreach ($__out as $o)
            if (substr(ltrim($o), 0, 2)!="#=")
                $r[]=$o;
        $__out=$r;
    }

    // update original file
    file_put_contents($__file, $__out);

    if (! $__SILENT)
        echo "\n";

} // while

return;

// --------------------------------------------------------------------------------

// include all files below provided path
// dirs - directory or array of directories
function include_all($dirs, $ext=".php") {
    if (! $dirs)
         return;
    if (is_array($dirs)) {
        foreach($dirs as $d)
            include_all($d);
        return;
    }

    // dirs is directory name
    if (substr($dirs,-1)!='/') $dirs.="/";

    $ext_len = strlen($ext);
    $dir = opendir($dirs);
    while ($file = readdir($dir)) {
        if (substr($file,0,1) == ".")
            continue; // temp/hidden files
        if (is_dir($dirs.$file)) {
            include_all($dirs.$file);
            continue;
        }
        if (substr($file,-$ext_len) == $ext)
            require_once($dirs.$file);
    }
    closedir($dir);
} // include_all

class Error {  // namespace

    PUBLIC static $suppress = 0;      // bit-mask to suppress errors

    private static $err = array(); // php-errors from error handler - use get() to read

    // return error (if any), clean up error info
    static function get() { # string or array with errors
        $e=self::$err;
        self::$err = array();
        return sizeof($e) == 1 ? $e[0] : $e;
    }

    PUBLIC static function suppress_notices() { self::$suppress |= E_NOTICE; }
    PUBLIC static function suppress_warnings() { self::$suppress |= E_WARNING; }
    // if you want to suppress something else - change Error::$suppress

    // Error::handler
    static function handler ($level, $message, $file, $line, $context) {
        // you can hide notices and warnings with @
        // you can't hide errors
        if (!error_reporting() && ($level == E_WARNING || $level == E_NOTICE))
            return;
 
        if ($level & self::$suppress) // allow people to debug ugly code
            return;

        static $map=array(
                          E_NOTICE       => 'NOTICE',
                          E_WARNING      => 'WARNING',
                          E_USER_ERROR   => 'USER ERROR',
                          E_USER_WARNING => 'USER WARNING',
                          E_USER_NOTICE  => 'USER NOTICE',
                          E_STRICT       => 'E_STRICT',
                          );
        $type = ($t = @$map[$level]) ? $t : "ERROR#$level";
        $e = "$type: $message";
        if (substr($file, 0, strlen(__FILE__)) != __FILE__)
            $e = array($e, $file, $line);
        array_push(self::$err, $e);
    }

} // class Error


// --------------------------------------------------------------------------------

function usage($me) {
    $v = number_format(VERSION,1);
    echo <<< USAGE
Spartan Test v$v - minimalistic PHP unit test framework
Usage:
    $me --help
    $me --example
    $me --legal

    $me [-g] file.test [file2.test] ...
    ./file.test
    find . -name "*.test" | $me --

USAGE;
}

function legal() {
    echo "
AUTHOR
  Sergey Porfiriev <parf@comfi.com>

COPYRIGHT
  (C) 2010 Comfi.com

LICENSE
  The MIT License (MIT) - http://www.opensource.org/licenses/mit-license.php
";
}

# force emacs php-mode
# Local Variables:
# mode: php
# End:
