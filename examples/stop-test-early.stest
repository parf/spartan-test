#!/usr/bin/env stest
//
// You can successfully or unsuccessfully stop test
//
# this test will FAIL, this is intentional !!!
# this test will FAIL, this is intentional !!!

# --test-stop
# STest::stop - stop test successfull, call Reporter->stop (usually same as Reporter->success)
; @$ARG['test-stop'] && STest::stop("no database found - stop");

# --test-error
# STest::error - stop test as failed, call Reporter->error
; @$ARG['test-error'] && STest::error("no database found - error condition");

# --test-alert
# STest::alert - stop test as failed, call Reporter->alert
# for production systems you should send SMS/Slack alert
; @$ARG['test-alert'] && STest::alert("no database found - alert condition");


// sample usecase below

//
// try to run this test
// 1. as-is (try to use -v aka --verbose)
// 2. with --no-db option  (emulate OK-database failure) - STest::stop case
// 3. with --no-db --force options - STest::erorr case
// 4. with --test-alert option
//

# using "--no-db" to emulate absense of database
; $db_connection = function () use ($ARG) { return @$ARG['no-db'] ? 0 : 1; };

# Stoping test via STest::stop(..)
# Test stopped this way is not considered as a failed test
# You can ignore `stop` with --force
; if (! $db_connection()) STest::stop("no database found, test skipped");

# Stoping test via STest::error(..)
# Test stopped this way is a FAILED test
# You can't ignore STest::error
; if (! $db_connection()) STest::error("no database found - error condition");

# Success Case
$db_connection();
    1;
