#!/usr/bin/env stest
<?php

# honor --domain; --realm; $ENV[STEST_REALM]
# ; STest::domain("http://127.0.0.2:8080"); # default behaviour - fail if no service on port
; STest::domain("http://127.0.0.2:8080", "stop"); # "stop" makes it silently fail w/o error;

# "!" Critical Test
# TEST will instantly fail if critical test failed
!/;
    'Welcome to test server';

# Substring content test
/;
    ~ "test server";

# Substrings present
/;
    ~ "test";
    ~ "server";
    ~ "Welcome";

# Regexp check
/;
    ~ /Test Server/i;

/some-path/xxx;
    ["code"=>404, "size"=>31];
# response body for non 200-code pages:
\STest::$INFO['body'];
    'Page "/some-path/xxx" Not Found';

# /info - show GET/POST/COOKIES info
/info?p2=v2;
    'GET /info?p2=v2 HTTP/1.1
    GET {"p2":"v2"}';
# using PHP variables as arguments
; $a = ['p1' => 'v & 1'];
/info $a;
    'GET /info?p1=v+%26+1 HTTP/1.1
    GET {"p1":"v & 1"}';
# combining two methods
/info?x=1 $a;
    'GET /info?x=1&p1=v+%26+1 HTTP/1.1
    GET {"x":"1","p1":"v & 1"}';

# POST
POST /info $a;
    'POST /info HTTP/1.1
    POST {"p1":"v & 1"}';

# get and post at the same time
POST /info?x=1 $a;
    'POST /info?x=1 HTTP/1.1
    POST {"p1":"v & 1"}
    GET {"x":"1"}';

# cookies set by remote page
/setcookie?k=test&v=3d;
    'cookie set';

\STest::$HEADERS['Set-Cookie'];
    ['test=3d', 'test_=3d'];

\STest::$COOKIE;
    ["test"=>'3d', "test_"=>'3d'];

/cookies;
    'COOKIE {"test":"3d","test_":"3d"}';

# HTTP_REFERER - we always use previous URL as a REFERER
# previous URL is kept in:
\STest::$URL;
    'http://127.0.0.2:8080/cookies';
/server?field=HTTP_REFERER;
    '_SERVER {"HTTP_REFERER":"http://127.0.0.2:8080/cookies"}';

/redirect;
    ["code"=>302, "redirect"=>'http://example.com/myOtherPage.php'];
# checking only code
/redirect?code=301 ['url' => 'http://xxx'];
    ["code"=>301, "redirect"=>'http://xxx/'];
# in case of non "200" response, BODY is an array
STest::$BODY;
    ["code"=>301, "redirect"=>'http://xxx/'];
# just check http_code, ignore rest
/redirect?code=301;
    ~ ['code' => 301];
/redirect?code=302;
    ["code"=>302, "redirect"=>'http://example.com/myOtherPage.php'];
/redirect?code=303;
    ["code"=>303, "redirect"=>'http://example.com/myOtherPage.php'];

# You current STest::$DOMAIN is replaced by $DOMAIN in redirect-urls
# this way you may have many site aliases and use same TEST
/redirect ['url' => 'a/b/c'];
    ["code"=>302, "redirect"=>'$DOMAIN/a/b/c'];

/non_empty_response;
    'bla bla';

# plain "~" - perform all usual tests, make sure http_code = 200
# make sure respose is not empty string (not an array)
# You can just list lots of urls and use "~" as a test
/non_empty_response;
    ~;


# XQUERY on recent query:

/html;
    ~;
preg_replace("!\s+!", " ", \STest::$INFO['body']);
    '<html> <head><title>page title</title></head> <body> <h1>header #1 in body</h1> <h1>second h1</h1> <a href="http://google.com">external-link</a> <a href=/some-page>external-link2</a> </body> </html>';

\STest::xq("/html/head/title");
    '<title>page title</title>';
\STest::xq("/html/head/title/text()");
    'page title';

# get all matches as one string
\STest::xq("//h1");
    '<h1>header #1 in body</h1>
    <h1>second h1</h1>';

# get matches as array elements
\STest::xq("//h1", 1);
    ['<h1>header #1 in body</h1>', '<h1>second h1</h1>'];


\STest::xq("//a[text()='external-link']/@href");
    'href="http://google.com"';

# get attribute value
\STest::xq("//a[text()='external-link2']", "dom")[0]->getAttribute("href");
    '/some-page';

# FOLLOW LINK ON PAGE by a-href TEXT

#\STest::follow("external-link2");
#    'this is some-page, ur welcome';

FOLLOW "no such link";
    'link with text="no such link" not found';


FOLLOW "external-link2";
    'this is some-page, ur welcome';


# JSONPOST

; $a = ["b" => ['a' => "value of b.a"], "a" => 3, "c" => 3.14];
# when server responded with json (checked via content-type header) - we decode it
JSONPOST /jsonPost $a;
    ["a"=>3, "b"=>["a"=>'value of b.a'], "c"=>3.14, "server-added-node"=>[3, 1, 4]];
# othervise we return data as string
JSONPOST /jsonPost2 $a;
    'your JSONPOST has 3 fields in query; first field: b';
JSONPOST /jsonPostZstd ['content-encoding is: zsTd'];
    ['content-encoding is: zsTd', "server-added-node"=>[3, 1, 4]];

#JSONPOST /jsonPost2 $a;
#    'xxx';

# Content-Encodings:
# gzip, zstd, ...

/dataGzip;
    'sample gzip text';

/dataZstd;
    'sample zstd text';
