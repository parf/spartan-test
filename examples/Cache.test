#!/bin/env spartan-test

// You can't run this test - this is just an example

// HOMEBASE FRAMEWORK
// memcached wrapper test

Cache::mc();
#={"class":"Memcached","0":{}}
Cache::mc()->getVersion();
#={"memcache1:11211":"1.4.13","memcache2:11211":"1.4.13","memcache3:11211":"1.4.13"}

phpversion();
#="5.4.1"

// simple-test
$key="sample-test-key";
#="sample-test-key"
$a="parf";
#="parf"
# put for 10 sec
Cache::put($key, $a, 10);
#="parf"
Cache::put($key."2", $a.$a, 10);
#="parfparf"
Cache::get($key);
#="parf"

# array access
$a=Cache::get(array($key,$key."2"));
#=-
# key order is undefined
ksort($a);
#=true
$a;
#={"sample-test-key":"parf","sample-test-key2":"parfparf"}

# multiple keys access, keys from template generation
Cache::put_mul(array("a" => 1, "b" => 2, "c" => 3), 10, "sample-test-%s");
#={"a":1,"b":2,"c":3}
Cache::get_mul("sample-test-%s", qw("a b c"));
#={"a":1,"b":2,"c":3}
Cache::get("sample-test-a", qw("a b c"));
#=1

Cache::delete($key);
#=null
Cache::get($key);
#=false

# add if not exists
Cache::add($key, "abc");
#=true
Cache::get($key);
#="abc"

# should not be added, keu should have "abc"
# WTF !!!
# BUG in memcached extension
# - it returned true, and it should return false !!!
Cache::add($key, "def");
#=true

Cache::get($key);
#="abc"

Cache::delete($key);
#=null

Cache::put($key, 0);
#=0

# WTF !!! 
# BUG in memcache extension
# - should return 1
Cache::inc($key);
#=-1
Cache::get($key);
#=1
# same BUG again
Cache::inc($key);
#=-1
Cache::inc($key);
#=2
Cache::dec($key);
#=3

Cache::lock($key);
#=true
Cache::put($key, 123);
#=123
Cache::is_lock($key);
#=1
Cache::unlock($key);
#=null
Cache::is_lock($key);
#=false

Cache::delete($key);
#=null
Cache::hash_put($key, "a", 1);
#=1
Cache::get($key);
#={"a":1}
Cache::hash_put($key, "b", 2);
#=2
Cache::hash_put($key, "c", 3);
#=3
Cache::hash_get($key, "a");
#=1
Cache::hash_get($key, "b");
#=2
Cache::hash_delete($key, "b");
#=2
Cache::get($key);
#={"a":1,"c":3}
Cache::hash_put_keys($key, array("a" => 2, "b" => 2, "d" => 4));
#={"a":2,"b":2,"d":4}
Cache::get($key);
#={"a":2,"b":2,"d":4,"c":3}

Cache::hash("test");
#={"class":"Cache_Hash","0":{"cat":"test","timeout":3600}}

Cache::delete($key);
#=null
Cache::array_merge($key, array(1,2,3));
#=[1,2,3]
Cache::array_shift($key);
#=1
Cache::array_shift($key);
#=2
Cache::array_shift($key);
#=3
Cache::array_shift($key);
#=null

Cache::delete($key);
#=null
Cache::once($key);
#=1
Cache::once($key);
#=false

Cache::delete($key);
#=null
Cache::once($key,2, 2);
#=false
Cache::once($key,2, 2);
#=false
Cache::once($key,2, 2);
#=2
Cache::once($key,2, 2);
#=false

?>
